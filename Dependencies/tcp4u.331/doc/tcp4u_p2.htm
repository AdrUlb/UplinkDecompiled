<HTML><HEAD>
<!-- This document was created with h2.pl -->
<TITLE>Tcp4u - TCP related functions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFC0" TEXT="#000000">
<H1>
Tcp4u - TCP related functions</H1>
<UL>
<LI><A HREF="#Mention1">Tcp4uErrorString</A>
<LI><A HREF="#Mention2">TcpAbort</A>
<LI><A HREF="#Mention3">TcpAccept</A>
<LI><A HREF="#Mention4">TcpClose</A>
<LI><A HREF="#Mention5">TcpConnect</A>
<LI><A HREF="#Mention6">TcpFlush</A>
<LI><A HREF="#Mention7">TcpGetListenSocket</A>
<LI><A HREF="#Mention8">TcpGetRemoteID</A>
<LI><A HREF="#Mention9">TcpIsDataAvail / TcpIsOOBDataAvail</A>
<LI><A HREF="#Mention10">TcpPPRecv</A>
<LI><A HREF="#Mention11">TcpPPSend</A>
<LI><A HREF="#Mention12">TcpRecv</A>
<LI><A HREF="#Mention13">TcpRecvUntilStr</A>
<LI><A HREF="#Mention14">TcpSend</A>
</UL>
<hr size=4>
 <h1>
<A NAME="Mention1">Tcp4uErrorString</A></h1>
 <p><br>
This function returns the error string associated with the given error code.<br>
This function uses the following association:<br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">Successful call  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">Network error  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_TIMEOUT <BR></TD>
<TD colspan=1 align="left">Timeout in recv or accept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_HOSTUNKNOWN <BR></TD>
<TD colspan=1 align="left">Reference to Unknown host  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_NOMORESOCKET <BR></TD>
<TD colspan=1 align="left">All sockets has been used up  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_NOMORERESOURCE <BR></TD>
<TD colspan=1 align="left">No more free resource  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CONNECTFAILED <BR></TD>
<TD colspan=1 align="left">Connect function has failed  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_UNMATCHEDLENGTH <BR></TD>
<TD colspan=1 align="left">TcpPPRecv : Error in length  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_BINDERROR <BR></TD>
<TD colspan=1 align="left">Bind failed (Task already started?)  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW <BR></TD>
<TD colspan=1 align="left">Overflow during TcpPPRecv/TcpRecvUntilStr  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_EMPTYBUFFER <BR></TD>
<TD colspan=1 align="left">TcpPPRecv receives 0 byte  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">Call cancelled by signal or TcpAbort   <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Not enough memory to perform function  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SOCKETCLOSED <BR></TD>
<TD colspan=1 align="left">Host has closed connection  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">OTHER... <BR></TD>
<TD colspan=1 align="left">Not an Tcp4 return code  <BR></TD></TR></TABLE>
 <pre>
Syntax:  Tcp4uErrorString (int Rc)
</pre>
<p><tt>Argument:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">Rc <BR></TD>
<TD colspan=1 align="left">An error code  <BR></TD></TR></TABLE><p><br>
<tt>Return: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">LPCSTR <BR></TD>
<TD colspan=1 align="left">A long pointer on the error string associated with Rc.  <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example : 
   Rc = TcpRecv (Socket, sz, sizeof sz, HFILE_ERROR);
   if (Rc &lt; TCP4U_SUCCESS)
      fprintf ( stderr, "Tcp4u error: &lt;%s&gt;\n", Tcp4uErrorString(Rc) );
</pre>
  <HR><H1>
<A NAME="Mention2">TcpAbort</A></h1>
 <p><br>
<b>(Windows only)</b><br>
This function cancels a Winsocket blocking operation for this task. <br>
This function is not mandatory under Unix, since any signal sent to the application will cancel a blocking Tcp4u call.<br>
As said above, while a process is waiting for a blocking call to be completed, it continues to receive messages (Timer, user's actions). This blocking operation must be canceled before any other network related functions can be called.<br>
When TcpAbort returns, the blocking call is canceled, but has not returned the control to the application. Thus the following code does not free the socket:</p>
 <pre>
    case WM_CLOSE :
          TcpAbort ();
          TcpClose (&amp; Socket);
          PostQuitMessage(0);
</pre>
<p>The TcpClose call will fails if a blocking call is in progress. TcpAbort has marked it as canceled, but a pause is necessary.</p>
 <pre>
Syntax:TcpAbort ()
</pre>
<p><tt>Return:</tt></p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The blocking call has been canceled  <BR></TD></TR></TABLE>
<pre>

Example:
</pre>
<p><br>
This example shows one of the safest ways to close an application.</p>
 <pre>
  case WM_TIMER :
        KillTimer (hWnd, wParam);
        PostMessage (hWnd, wParam, 0, 0l);
        break;
  case WM_CLOSE :
        TcpAbort ();
        SetTimer (hWnd, WM_USER, 100, NULL);
        break;
  case WM_USER :
        TcpClose (&amp; Socket);
        Tcp4uCleanup  ();
        DestroyWindow (hWnd);
        PostQuitMessage(0);
        break;
</pre>
  <HR><H1>
<A NAME="Mention3">TcpAccept</A></h1>
 <p><br>
This function waits for a connection and establishes it. The functions blocks until a client tries to establish a connection with the host.<br>
This function must be called after a successful TcpGetListenSocket.</p>
 <pre>
Syntax: TcpAccept (SOCKET *pConnSock, SOCKET ListenSock, UINT TimeOut)
</pre>
 <pre>

</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">pConnSock <BR></TD>
<TD colspan=1 align="left">A pointer on a socket descriptor. TcpAccept fills it with a value which identifies the connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">ListenSock <BR></TD>
<TD colspan=1 align="left">A socket descriptor given by the FtpGetListenSock  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TimeOut <BR></TD>
<TD colspan=1 align="left">the value of the timeout in second. 0 means that the function will block until a connection is requested.  <BR></TD></TR></TABLE><p><br>
<tt>Returns</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The function can not write into pConnSock  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The call has been cancelled by TcpAbort or Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_TIMEOUT <BR></TD>
<TD colspan=1 align="left">A timeout occurred  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">A connection has been requested and its descriptor is available in the pConnSocket descriptor  <BR></TD></TR></TABLE>
 <HR><H1>
<A NAME="Mention4">TcpClose</A></h1>
 <p><br>
This function closes a socket created with TcpAccept, TcpGetListenSocket or TcpConnect. After successful completion, the socket descriptor is set to INVALID_SOCKET.</p>
 <pre>
Syntax: TcpClose (SOCKET *pSock)
</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">pSock <BR></TD>
<TD colspan=1 align="left">A pointer on a socket descriptor. TcpClose fills it to INVALID_SOCKET.  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The function can not write into pSock  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The Socket has been successfully closed. *pSock has been set to INVALID_SOCKET  <BR></TD></TR></TABLE>
 <HR><H1>
<A NAME="Mention5">TcpConnect</A></h1>
 <p><br>
This function tries to establish a connection with a remote peer. A server process must be waiting on the same port on the remote host for a successful completion.</p>
 <pre>
Syntax: TcpConnect (SOCKET *pS, LPCSTR szHost, LPCSTR szService, 
                    unsigned short *lpPort)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">pS <BR></TD>
<TD colspan=1 align="left">A pointer on a socket descriptor. It is filled by TcpConnect  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szHost <BR></TD>
<TD colspan=1 align="left">The name or the IP-Address of the server to be reached  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szService <BR></TD>
<TD colspan=1 align="left">The name of the TCP service which is to be used (NULL if any)  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">lpPort <BR></TD>
<TD colspan=1 align="left">A 32-bit pointer on a 16-bit integer. This integer contains the value of the Port which is to be used. If the argument szService is not NULL, TcpConnect tries to locate the port in the file <i>service</i>, if it fails the value contained into lpPort is used, if it succeeds TcpConnect fills the value to the port returned.   <BR></TD></TR></TABLE><p><br>
<tt>Return:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED  <BR></TD>
<TD colspan=1 align="left">The function can not write into pS  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CONNECTFAILED <BR></TD>
<TD colspan=1 align="left">The server can not be reached or no process are listening on the port.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_HOSTUNKNOWN  <BR></TD>
<TD colspan=1 align="left">The host has not been found in the file <i>hosts</i>, or the dotted address is not valid (ie: "10.10.10.543")  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_NOMORESOCKET <BR></TD>
<TD colspan=1 align="left">All sockets have been used.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The connection has been established and its descriptor is available in the pS descriptor  <BR></TD></TR></TABLE><p><br>
Example:<br>
This sample app will try to establish a connection with the FTP server<i>
szHost.</i> It waits for its answer, then closes the connection and terminates.</p>
 <pre>
if (Tcp4uInit () != TCP4U_SUCCESS)   return 0;
   Rc = TcpConnect (&amp; CSock, szHost, "ftp", &amp; nPort);
   if (Rc==TCP4U_SUCCESS)
     {
       TcpRecv (CSock, szReply, sizeof szReply-1, 60, HFILE_ERROR);
       TcpClose (&amp; CSock);  
       printf ("Connection successful on port %d\nserver said:\n\n%s\n",
                nPort, szReply);
     }
   else   printf ("Connection failed\nerror %d", Rc);
Tcp4uCleanup ();
return 0;
</pre>
 <HR><H1>
<A NAME="Mention6">TcpFlush</A></h1>
 <p><br>
This function empties the reception buffer of a given socket.</p>
 <pre>
Syntax:  TcpFlush (SOCKET S)
</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">S <BR></TD>
<TD colspan=1 align="left">A Socket returned by TcpConnect or TcpAccept.  <BR></TD></TR></TABLE><p><br>
<tt>Return:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED  <BR></TD>
<TD colspan=1 align="left">Operation has been cancelled with TcpAbort, Tcp4uCleanup or a user signal  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SOCKETCLOSED <BR></TD>
<TD colspan=1 align="left">The remote peer has closed its connection. No more data are to be received.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">Reception buffer is now empty.  <BR></TD></TR></TABLE>
<pre>

</pre>
  <HR><H1>
<A NAME="Mention7">TcpGetListenSocket</A></h1>
 <p><br>
This function prepares the application for accepting connection on a given port. This is one of the first call that a server application should attempt.<br>
The socket is created with the SO_REUSEADDR rule in order to allow several connections on the same port. </p>
 <pre>
Syntax:   TcpGetListenSocket (SOCKET *pS, LPCSTR szService, 
                              unsigned short *lpPort, 
                              int nPendingConnection)
</pre>
 <pre>

</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">pS <BR></TD>
<TD colspan=1 align="left">A pointer on a socket descriptor. It is filled with a value which is to be passed to TcpAccept in order to establish connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szService <BR></TD>
<TD colspan=1 align="left">A string pointer on the service used by the application. If the pointer is NULL or the service has not been found, the value given into lpPort is used.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">lpPort <BR></TD>
<TD colspan=1 align="left">A pointer on a value which should contain the port on which the application should await connections. If szService is a valid service name, lpPort will contain the port corresponding to this service.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">NPendingConnection <BR></TD>
<TD colspan=1 align="left">The maximum length to which the queue of pending connection may grow. Illegal values (less than 1 or greater than 5) are replaced by the nearest legal value.  <BR></TD></TR></TABLE><p><br>
<tt>Return:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The pS pointer is not usable.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED  <BR></TD>
<TD colspan=1 align="left">Operation has been cancelled with TcpAbort, Tcp4uCleanup or a user signal.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_NOMORESOCKET  <BR></TD>
<TD colspan=1 align="left">All sockets have been used up.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The application is now listening for incoming connections. TcpAccept must be called to establish them.  <BR></TD></TR></TABLE>
<pre>

</pre>
<p><br>
Example:<br>
This sample application is an FTP server which accepts any incoming connection then rejects the client by sending a reject string and dies. Since this sample does not have a window, it must be tested by an FTP client as shown above.</p>
 <pre>
#include &lt;tcp4u.h&gt;
static char szRejectStr[] = "421 Sorry, just a fake FTP server";
int main (void)
{
SOCKET         ListenSock, ConnSock;
int            Rc;
unsigned short nPort=0;
   if (Tcp4uInit () != TCP4U_SUCCESS)   return 0;
   Rc = TcpGetListenSocket (&amp; ListenSock, "ftp", &amp; nPort, 1);
   if (Rc==TCP4U_SUCCESS)
     {
        Rc = TcpAccept (&amp; ConnSock, ListenSock, 0);
        if (Rc==TCP4U_SUCCESS)
          {
            TnSend (ConnSock, szRejectStr, FALSE, HFILE_ERROR);
            TcpClose (&amp; ConnSock);
          }
        TcpClose (&amp; ListenSock); 
      }
   Tcp4uCleanup ();
return 0;
}  /* main */    
</pre>
  <HR><H1>
<A NAME="Mention8">TcpGetRemoteID</A></h1>
 <p><br>
This function identifies the peer station connected to the specified socket.</p>
 <pre>
Syntax:     TcpGetRemoteID (SOCKET s, LPSTR szStrName, int uNameSize, 
                            DWORD *lpAddress)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">S <BR></TD>
<TD colspan=1 align="left">The socket by which the peer station is connected.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">SzStrName <BR></TD>
<TD colspan=1 align="left">A pointer on a string which is to be filled with the name of the station. If this pointer is NULL, the name of the station is not returned.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uNameSize <BR></TD>
<TD colspan=1 align="left">The size of the buffer szStrName.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">lpAddress <BR></TD>
<TD colspan=1 align="left">A pointer on a double word which is to be filled with the IP address of the station. If this pointer is NULL, the IP-Address is not returned.  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">The IP-stack was unable to get the name of the remote station. The socket descriptor does not identify a connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW  <BR></TD>
<TD colspan=1 align="left">The name is longer than the given buffer.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The requested data are available.  <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example:
char StationName[64];
DWORD IPAddress;
unsigned char *cAdd = (char *) &amp;IPAddress;
   TcpGetRemoteID (Skt, StationName, sizeof StationName, &amp;IPAddress);
   printf ("Remote Station on socket %d is %s, Address %u.%u.%u.%u",
             Skt, StationName, cAdd[0], cAdd[1], cAdd[2], cAdd[3]);
</pre>
 <pre>

</pre>
  <HR><H1>
<A NAME="Mention9">TcpIsDataAvail / TcpIsOOBDataAvail</A></h1>
 <p><br>
TcpIsDataAvail returns TRUE if data are available in the reception queue of socket S. The application can assume that the next TcpRecv function will return immediately. <br>
Note that TcpPPRecv can still block since it waits for a whole message.<br>
TcpIsOOBDataAvail checks if Out Of Band data (a datagram with an high priority) have been received.</p>
 <pre>
Syntax:     TcpIsDataAvail (SOCKET s)
            TcpIsOOBDataAvail (SOCKET s)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">S <BR></TD>
<TD colspan=1 align="left">The socket by which the peer station is connected.  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TRUE <BR></TD>
<TD colspan=1 align="left">Data have been received. The next TcpRecv call will copy them into an application's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">FALSE <BR></TD>
<TD colspan=1 align="left">No data available. The next tcpRecv call will block  <BR></TD></TR></TABLE>
<pre>

Example :
   TcpRecv (skt, szBuf, sizeof szBuf, 0, HFILE_ERROR);
   /* before processing data into szBuf check if OOB have */
   /* been received                                        */
   if (TcpIsOOBDataAvail(skt))
   {
     ... process out of Band data ....
   }
</pre>
 <HR><H1>
<A NAME="Mention10">TcpPPRecv</A></h1>
 <p><br>
This function receives a frame with a timeout. The first 16-bits of this frame contains its length in network order. They are NOT passed into the user's buffer.<br>
This is a safe way to exchange binary structures in a client-server application. The server will neither hang nor crash if a bad structure is sent: it will just return errors such as TCP4U_TIMEOUT, TCP4U_OVERFLOW or TCP4U_UNMATCHEDLENGTH.</p>
 <pre>
Syntax:   TcpPPRecv (SOCKET s, LPSTR szBuf, unsigned uBufSize, 
                     unsigned uTimeOut, BOOL bExact, HFILE hLogFile)
</pre>
 <pre>

</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">s <BR></TD>
<TD colspan=1 align="left">The descriptor of the connection returned by TcpConnect or TcpAccept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szBuf <BR></TD>
<TD colspan=1 align="left">The user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uBufSize <BR></TD>
<TD colspan=1 align="left">Its size in bytes  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uTimeOut <BR></TD>
<TD colspan=1 align="left">The timeout in second  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">bExact <BR></TD>
<TD colspan=1 align="left">Specify if the TcpPPRecv function should receive exactly uBufSize bytes  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hLogFile <BR></TD>
<TD colspan=1 align="left">A file (returned by _lopen, _lcreat) in which the data are written To disable this feature, this argument should be HFILE_ERROR  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The user's buffer has been released.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The request has been cancelled by TcpAbort or Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_EMPTYBUFFFER  <BR></TD>
<TD colspan=1 align="left">The frame is empty. (Its length is 0 byte)  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is already in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Tcp4w can not allocate its temporary buffers  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW <BR></TD>
<TD colspan=1 align="left">The frame to be received is greater than the user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SOCKETCLOSED <BR></TD>
<TD colspan=1 align="left">The remote host has closed its connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_UNMATCHEDLENGTH <BR></TD>
<TD colspan=1 align="left">The parameter bExact is set to TRUE and the expected length differs from the received one.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">&gt;= TCP4U_SUCCESS  <BR></TD>
<TD colspan=1 align="left">The length in bytes of the received frame. The frame is copied into the user's buffer except the first two bytes.  <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example:
struct S_my {...} S;
  Rc = TcpPPRecv (Skt, (LPSTR) &amp; S, sizeof S, 60, TRUE, HFILE_ERROR);
  if (Rc&gt;=TCP4U_SUCCESS)
    printf ("Exact structure has been received: %d==%d\n, Rc, sizeof S);
  if (Rc==TCP4U_UNMATCHEDLENGTH) 
     printf ("Data have not struct S_my type\n");
</pre>
 <pre>

</pre>
 <HR><H1>
<A NAME="Mention11">TcpPPSend</A></h1>
 <p><br>
This function sends a two-bytes frame which are the size of the data to be sent, then the data are sent.<br>
This function should be used while the peer process is waiting on a TcpPPRecv call.</p>
 <pre>
Syntax: TcpPPSend (SOCKET s, LPCSTR szBuf, unsigned uBufSize, HFILE hLogFile)
</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">s <BR></TD>
<TD colspan=1 align="left">The descriptor of the connection returned by TcpConnect or TcpAccept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szBuf <BR></TD>
<TD colspan=1 align="left">The user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uBufSize <BR></TD>
<TD colspan=1 align="left">Its size in bytes  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hLogFile <BR></TD>
<TD colspan=1 align="left">A file (returned by _lopen, _lcreat) in which the data are written. To disable this feature, this argument should be HFILE_ERROR  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The request has been cancelled by TcpAbort or Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is already in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Tcp4w can not allocate its temporary buffers  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The data have been sent.  <BR></TD></TR></TABLE>
<pre>

Example:
</pre>
 <pre>
struct S_my {...} S;
  Rc = TcpPPSend (Skt, (LPCSTR) &amp; S, sizeof S, HFILE_ERROR);
</pre>
 <pre>

</pre>
  <HR><H1>
<A NAME="Mention12">TcpRecv</A></h1>
 <p><br>
This function receives data sent by the remote station.</p>
 <pre>

</pre>
 <pre>
Syntax:  TcpRecv (SOCKET s, LPSTR szBuf, unsigned uBufSize, 
                  unsigned uTimeOut, HFILE hLogFile)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">s <BR></TD>
<TD colspan=1 align="left">The descriptor of the connection returned by TcpConnect or TcpAccept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szBuf <BR></TD>
<TD colspan=1 align="left">The user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uBufSize <BR></TD>
<TD colspan=1 align="left">Its size in bytes  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uTimeOut <BR></TD>
<TD colspan=1 align="left">The timeout in second  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hLogFile <BR></TD>
<TD colspan=1 align="left">A file (returned by _lopen, _lcreat) in which the data are written. To disable this feature, this argument should be HFILE_ERROR  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The user's buffer has been released.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The request has been cancelled by TcpAbort or Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_EMPTYBUFFFER <BR></TD>
<TD colspan=1 align="left">The frame is empty. (Its length is 0 byte)  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is already in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Tcp4w can not allocate its temporary buffers  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW <BR></TD>
<TD colspan=1 align="left">The frame to be received is greater than the user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SOCKETCLOSED <BR></TD>
<TD colspan=1 align="left">The remote host has closed its connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">&gt;=TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The length in bytes of the received frame. The frame is copied into the user's buffer except the first two bytes.  <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example:
char szBuf[64];
  Rc = TcpRecv (Skt, szBuf, sizeof szBuf, 60, HFILE_ERROR);
  wsprintf (szStr,"%d bytes have been received\nBuffer %s",Rc,szBuf);
  MessageBox (hWnd, szStr, "Test Tcp4w", MB_OK); 
</pre>
 <pre>

</pre>
 <HR><H1>
<A NAME="Mention13">TcpRecvUntilStr</A></h1>
 <p><br>
This function receives data sent by the remote station until a particular string has been received.<br>
Note: This function should not be used with the Novell stack LAN Workplace.</p>
 <pre>
Syntax:TcpRecvUntilStr (SOCKET s, LPSTR szBuf, unsigned *lpBufSize,
                           LPCSTR szStop, unsigned uStopSize, 
                           BOOL bCaseSensitive,
                           unsigned uTimeOut, HFILE hLogFile);
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">s <BR></TD>
<TD colspan=1 align="left">The descriptor of the connection returned by TcpConnect or TcpAccept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szBuf <BR></TD>
<TD colspan=1 align="left">The user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">lpBufSize <BR></TD>
<TD colspan=1 align="left">A pointer on a word which must be initialized with the size of the user's buffer. In return, this word will contain the length of the received frame.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szStop <BR></TD>
<TD colspan=1 align="left">The string which ends the reception  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uStopSize <BR></TD>
<TD colspan=1 align="left">The length of this string  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">bCaseSensitive <BR></TD>
<TD colspan=1 align="left">set to TRUE if the end-string is case sensitive.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uTimeOut <BR></TD>
<TD colspan=1 align="left">The timeout in second  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hLogFile <BR></TD>
<TD colspan=1 align="left">A file (returned by _lopen, _lcreat) in which the data are written. To disable this feature, this argument should be HFILE_ERROR  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BUFFERFREED <BR></TD>
<TD colspan=1 align="left">The user's buffer has been released.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The request has been cancelled by TcpAbort or Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is already in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Tcp4w can not allocate its temporary buffers  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW <BR></TD>
<TD colspan=1 align="left">The user's buffer has been filled and the searched string has not been received.   <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SOCKETCLOSED <BR></TD>
<TD colspan=1 align="left">The remote host has closed its connection.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The string has been received (all previously received bytes have been copied into the user's buffer, NOT the szStop string).   <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example:
char szBuf[64];
char szEndStr[] = "#END#";
UINT nLength = sizeof szBuf;
  Rc = TcpRecvUntilStr (Skt, szBuf, &amp; nLength,
                        szEndStr, sizeof szEndStr, 60, HFILE_ERROR);
  printf ("%d bytes have been received\nBuffer %s", nLength, szBuf);
</pre>
 <pre>

</pre>
  <HR><H1>
<A NAME="Mention14">TcpSend</A></h1>
 <p><br>
This function sends the given data to the remote connected peer.</p>
 <pre>
Syntax:    TcpSend (SOCKET s, LPCSTR szBuf, unsigned uBufSize, 
                    BOOL bHighPriority, HFILE hLogFile)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">s <BR></TD>
<TD colspan=1 align="left">The descriptor of the connection returned by TcpConnect or TcpAccept  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szBuf <BR></TD>
<TD colspan=1 align="left">The user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uBufSize <BR></TD>
<TD colspan=1 align="left">Its size in bytes  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">bHighPriority <BR></TD>
<TD colspan=1 align="left">set to TRUE if the date are to be sent in Out Of Band mode.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hLogFile <BR></TD>
<TD colspan=1 align="left">A file (returned by _lopen, _lcreat) in which the data are written. To disable this feature, this argument should be HFILE_ERROR  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The request has been cancelled by TcpAbort or  Tcp4uCleanup  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An unexpected error has occurred or a blocking call is already in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Tcp4w can not allocate its temporary buffers  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The data have been sent.  <BR></TD></TR></TABLE>
<pre>

</pre>
 <pre>
Example:
char szBuf[] = "Bonjour";
  Rc = TcpSend (Skt, szBuf, lstrlen(szBuf)+1, FALSE, HFILE_ERROR);
</pre>
 <pre>

</pre>
 </body></html>
<hr size=4>
<table border=1 CELLPADDING=7 align=center><tr>
<td><A HREF="tcp4u.htm">Overview</A></td>
<td><A HREF="tcp4u_p1.htm">Multi purpose func.</A></td>
<td><A HREF="tcp4u_p2.htm">TCP functions</A></td>
<td><A HREF="tcp4u_p3.htm">Telnet related func</A></td>
<td><A HREF="tcp4u_p4.htm">HTTP functions</A></td>
<td><A HREF="tcp4u_p5.htm">UDP functions</A></td>
<td><A HREF="tcp4u_p6.htm">SMTP functions</A></td>
</tr></table>
<font italic size=2>
<table border=0><tr>
<td align=left>Tcp4u version 3.31 by Ph. Jounin and Laurent Le Bras</td>
<td align=right>Last updated: 10th march 1998</td>
<tr>
</table>
</font>
