<HTML><HEAD>
<!-- This document was created with h2.pl -->
<TITLE>Tcp4u - UDP related functions</TITLE></HEAD>
<BODY BACKGROUND="" BGCOLOR="#FFFFC0" TEXT="#000000">
<H1>
Tcp4u - UDP related functions</H1>
<UL>
<LI><A HREF="#Mention1">Udp4uServiceToPort</A>
<LI><A HREF="#Mention2">UdpBind</A>
<LI><A HREF="#Mention3">UdpCleanup</A>
<LI><A HREF="#Mention4">UdpInit</A>
<LI><A HREF="#Mention5">UdpRecv</A>
<LI><A HREF="#Mention6">UdpSend</A>
</UL>
<hr size=4>
 <h1>
<A NAME="Mention1">Udp4uServiceToPort</A></h1>
 <p><br>
This function translate an UDP service, which is given as a string into a port identifier, which is a 2-bytes integer. <br>
The function returns the port identifier in the processor order or 0 if the service has not been found into the file <i>services</i>.</p>
 <pre>
Syntax:            UdpServiceToPort (LPCSTR szService)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">szService <BR></TD>
<TD colspan=1 align="left">The service to be translated.  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">unsigned short  <BR></TD>
<TD colspan=1 align="left">The port identifier or 0 if error  <BR></TD></TR></TABLE>
<pre>

Example :
    printf ("echo service is port %u\n", Udp4uServiceToPort ("echo"));
</pre>
 <HR><H1>
<A NAME="Mention2">UdpBind</A></h1>
 <p><br>
This function binds the Udp dialog to a given host. After this call, all datagrams sent from another host are rejected by the library. Only those which are sent by the given host are seen by the application. Moreover, all datagrams sent by the application will be addressed to this host.<br>
This association can be reset (default) by setting the bFilter parameter to FALSE;<br>
The remote host is either the host given in the UdpInit function (client mode) or the host which has sent the last received datagram (server mode). This behavior is specified by the nMode argument.</p>
 <pre>
Syntax:            UdpBind (LPUDPSOCK Udp, BOOL bFilter, int nMode)
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">Udp <BR></TD>
<TD colspan=1 align="left">The descriptor returned by UdpInit.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">BFilter <BR></TD>
<TD colspan=1 align="left">TRUE in order to set an association, <br>
FALSE in order to remove the current association   <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">nMode <BR></TD>
<TD colspan=1 align="left">UDP4U_CLIENT to receive datagrams only from the host given to UdpInit,<br>
UDP4U_SERVER to receive datagrams only from the host which has sent the previous datagram  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">function has succedeed  <BR></TD></TR></TABLE>
<pre>

Example :
LPUDPSOCK   Udp;   /* Udp4u descriptor */
    UdpInit (&amp; Udp, "www.myhost.fr", 7, 0);
    UdbBind (Udp, TRUE, UDP4U_CLIENT);
    /* Udp4u will ignore any datagram not sent by www.myhost.fr */
    UdpRecv (Udp, sBuf, sizeof sBuf, 100, HFILE_ERROR);
    printf ("www.myhost.fr said &lt;%s&gt;\n", sBuf);
</pre>
 <HR><H1>
<A NAME="Mention3">UdpCleanup</A></h1>
 <p><br>
This function frees local resource. The application should call Tcp4uCleanup before quitting.</p>
 <pre>
Syntax:   UdpCleanup  (LPUDPSOCK Udp);
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">Udp <BR></TD>
<TD colspan=1 align="left">The descriptor returned by UdpInit.  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">The socket can not be closed. A blocking call is still in progress  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">Successful call  <BR></TD></TR></TABLE>
<pre>

</pre>
 <HR><H1>
<A NAME="Mention4">UdpInit</A></h1>
 <p><br>
This function prepares an Udp dialog. It should be called before any other Udp4u call, but after a successful Tcp4uInit.<br>
If a local port is specified, the library will accept data only from this port.<br>
If no host is specified, the library is unable to sent data until a successful UdpBind call.<br>
Note: the port are given into the processor (natural) order.</p>
 <pre>
Syntax:   UdpInit  (LPUDPSOCK *pUdp, LPCSTR szHost, 
                    unsigned short uRemotePort, unsigned short uLocalPort);
</pre>
 <pre>

</pre>
<p><tt>Arguments:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">pUdp <BR></TD>
<TD colspan=1 align="left">A pointer on a descriptor which will be returned by the Tcp4u library if the function succeeds. This handle should be passed by the application to any Udp4u call.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">SzHost <BR></TD>
<TD colspan=1 align="left">The host to be reached, or NULL  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uRemotePort <BR></TD>
<TD colspan=1 align="left">The remote service to be used or 0  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uLocalPort <BR></TD>
<TD colspan=1 align="left">The local service to be used or 0  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_BINDERROR <BR></TD>
<TD colspan=1 align="left">Tcp4u can not bind the socket to the specified local port  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_HOSTUNKNOWN <BR></TD>
<TD colspan=1 align="left">Tcp4u can not resolve the address of the given host  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_NOMORESOCKET <BR></TD>
<TD colspan=1 align="left">Tcp4u was unable to create a socket  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_INSMEMORY <BR></TD>
<TD colspan=1 align="left">Not enough memory to create the UDPSOCK structure.  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The socket has been created  <BR></TD></TR></TABLE>
<pre>

Example :
LPUDPSOCK   Udp;   /* Udp4u descriptor */
    UdpInit (&amp; Udp, "www.myhost.fr", 7, NULL);
</pre>
 <HR><H1>
<A NAME="Mention5">UdpRecv</A></h1>
 <p><br>
This function receive a datagram. If the function UdpBind has been called, the library will accepts only the datagrams sent by the current host.</p>
 <pre>
Syntax:    UdpRecv (LPUDPSOCK Udp, LPSTR sData, int nDataSize
                    unsigned uTimeout, HFILE hf);
</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">Udp <BR></TD>
<TD colspan=1 align="left">The descriptor returned by UdpInit  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">sData <BR></TD>
<TD colspan=1 align="left">A buffer which will be filled by the datagram  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">nDataSize <BR></TD>
<TD colspan=1 align="left">The size of the user's buffer  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">uTimeout <BR></TD>
<TD colspan=1 align="left">The timeout in second  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hf <BR></TD>
<TD colspan=1 align="left">A file handler into which the data will be written  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An error has occurred  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_CANCELLED <BR></TD>
<TD colspan=1 align="left">The called was canceled by a signal or TcpAbort  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_TIMEOUT <BR></TD>
<TD colspan=1 align="left">Timeout has occurred  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The buffer has been sent   <BR></TD></TR></TABLE>
<pre>

</pre>
  <HR><H1>
<A NAME="Mention6">UdpSend</A></h1>
 <p><br>
This function sends a datagram to the current host. The addressee is the host given to the UdpInit function or the client host if a UdpBind has been called in server mode.</p>
 <pre>
Syntax:    UdpSend (LPUDPSOCK Udp, LPCSTR szData, int nDataSize
                    BOOL bHighPriority, HFILE hf);
</pre>
<p><tt>Arguments: </tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">Udp <BR></TD>
<TD colspan=1 align="left">The descriptor returned by UdpInit  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">szData <BR></TD>
<TD colspan=1 align="left">The data to be sent  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">nDataSize <BR></TD>
<TD colspan=1 align="left">The number of bytes to be sent  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">bHighPriority <BR></TD>
<TD colspan=1 align="left">TRUE if the string must be sent in Out Of Band mode  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">hf <BR></TD>
<TD colspan=1 align="left">A file handler into which the data will be written  <BR></TD></TR></TABLE><p><br>
<tt>Returns:</tt><br>
</p>
<TABLE><TR align="left">
<TD colspan=1 align="left">TCP4U_ERROR <BR></TD>
<TD colspan=1 align="left">An error has occurred  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_OVERFLOW <BR></TD>
<TD colspan=1 align="left">The buffer to be sent exceeds the datagram size  <BR></TD></TR><TR align="left">
<TD colspan=1 align="left">TCP4U_SUCCESS <BR></TD>
<TD colspan=1 align="left">The buffer has been sent   <BR></TD></TR></TABLE>
<pre>

</pre>
</body></html>
<hr size=4>
<table border=1 CELLPADDING=7 align=center><tr>
<td><A HREF="tcp4u.htm">Overview</A></td>
<td><A HREF="tcp4u_p1.htm">Multi purpose func.</A></td>
<td><A HREF="tcp4u_p2.htm">TCP functions</A></td>
<td><A HREF="tcp4u_p3.htm">Telnet related func</A></td>
<td><A HREF="tcp4u_p4.htm">HTTP functions</A></td>
<td><A HREF="tcp4u_p5.htm">UDP functions</A></td>
<td><A HREF="tcp4u_p6.htm">SMTP functions</A></td>
</tr></table>
<font italic size=2>
<table border=0><tr>
<td align=left>Tcp4u version 3.31 by Ph. Jounin and Laurent Le Bras</td>
<td align=right>Last updated: 10th march 1998</td>
<tr>
</table>
</font>
